@using MUnique.OpenMU.DataModel.Entities
@using MUnique.OpenMU.GameLogic
@using MUnique.OpenMU.Web.Map.Map

<table>
    <thead>
    <tr>
        <td>Player Name</td>
        <td>ID</td>
        <td>Actions</td>
    </tr>
    </thead>
    <tbody>
    @* todo: this leads to problems, because the list may have changed during enumeration.
             additionally, ObjectsChanged also fires when monsters have changed (e.g. by being killed),
             so we do a lot of unneeded iterations here.*@
    @foreach (var player in this.MapController.Objects.Values.OfType<Player>())
    {
        <tr>
            <td>@player.Name</td>
            <td>@player.Id</td>
            <td>
                <button type="button" class="oi oi-account-logout" @onclick=@(async () => await player.DisconnectAsync()) title="Disconnect"></button>
                <button type="button" class="oi oi-ban" @onclick=@(async () => { if (player.Account is not null) { player.Account.State = AccountState.TemporarilyBanned; } await player.DisconnectAsync(); }) title="Temporarily ban"></button>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {

    /// <summary>
    /// Gets or sets the map controller.
    /// </summary>
    [Parameter]
    public IMapController MapController { get; set; } = null!;

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this.MapController.ObjectsChanged += (_, _) => this.InvokeAsync(this.StateHasChanged);
    }
}
