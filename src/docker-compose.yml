version: '3.4'

volumes:
  dbdata:

services:
  nginx:
    image: nginx:alpine
    container_name: nginx_container
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./.htpasswd:/etc/nginx/.htpasswd
    depends_on:
      - adminPanel
      - gameServer1
      - zipkin
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning

      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_PROXY_ENABLED=true
      - GF_AUTH_PROXY_HEADER_NAME=X-WEBAUTH-USER
      - GF_AUTH_PROXY_HEADER_PROPERTY=username
      - GF_AUTH_AUTO_ASSIGN_ORG=true
      - GF_AUTH_AUTO_ASSIGN_ORG_ROLE=Admin

      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_ROOT_URL=http://localhost/grafana/
      # - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/
    depends_on:
      - loki
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://loki:3100
            #jsonData:
            #  httpHeaderName1: "X-Scope-OrgID"
            #secureJsonData:
            #  httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - 3000

  loki:
    image: grafana/loki:2.5.0
    container_name: loki
    command: "-config.file=/etc/loki/config.yaml -target=all"
    ports:
      - "3100:3100"
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ACCESS_KEY=loki
      - MINIO_SECRET_KEY=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data

  dapr-placement:
    image: "daprio/dapr"
    command: ["./placement", "-port", "50006"]

  #redis-pub: 
  #  image: redis
  #  restart: always
  #  environment:
  #    ALLOW_EMPTY_PASSWORD: "yes"
  #  ports:
  #    - "50100:50001"

  pubsub:
    image: rabbitmq:3-management-alpine
    restart: always
    ports:
      - "5672"
      - "50100:50001"

  database:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: openmu
      POSTGRES_USER: postgres
    ports:
      - "5432"
    volumes:
      - dbdata:/var/lib/postgresql/data #store data on volume

  zipkin:
    image: openzipkin/zipkin
    restart: always
    ports:
      - "9411:9411"

  gameServer1:
    image: ${DOCKER_REGISTRY-}openmu-gs
    build:
      context: .
      dockerfile: Dapr/GameServer.Host/Dockerfile
    ports:
      - "80"
      - "50001:50001"
      - "55901:55901"
    environment:
      DB_HOST: database
      GS_ID: 0
      APPID: gameServer1
      PATH_BASE: /gameServer/1/
    depends_on:
      - connectServer-dapr
      - loginServer-dapr
      - friendServer-dapr
      - pubsub
      - zipkin
      - database

  gameServer1-dapr:
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "gameServer1", "-app-port", "80",
                "-components-path", "/components",
                "-config", "/components/config.yaml",
                "-placement-host-address", "dapr-placement:50006"  ]
    depends_on:
      - gameServer1
    network_mode: "service:gameServer1"
    volumes:
      - "./Dapr/components/:/components"

  connectServer:
    image: ${DOCKER_REGISTRY-}openmu-cs
    build:
      context: .
      dockerfile: Dapr/ConnectServer.Host/Dockerfile
    ports:
      - "50010:50001"
      - "44405:44405"
    environment:
      DB_HOST: database
      APPID: connectServer
    depends_on:
      - pubsub
      - zipkin
      - database

  connectServer-dapr:
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "connectServer", "-app-port", "80",
                "-components-path", "/components",
                "-config", "/components/config.yaml",
                "-placement-host-address", "dapr-placement:50006"  ]
    depends_on:
      - connectServer
    network_mode: "service:connectServer"
    volumes:
      - "./Dapr/components/:/components"

  loginServer:
    image: ${DOCKER_REGISTRY-}openmu-login
    build:
      context: .
      dockerfile: Dapr/LoginServer.Host/Dockerfile
    ports:
      - "50011:50001"
    depends_on:
      - zipkin
      - database

  loginServer-dapr:
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "loginServer", "-app-port", "80",
                "-components-path", "/components",
                "-config", "/components/config.yaml",
                "-placement-host-address", "dapr-placement:50006"  ]
    depends_on:
      - loginServer
    network_mode: "service:loginServer"
    volumes:
      - "./Dapr/components/:/components"

  friendServer:
    image: ${DOCKER_REGISTRY-}openmu-friends
    build:
      context: .
      dockerfile: Dapr/FriendServer.Host/Dockerfile
    environment:
      DB_HOST: database
    ports:
      - "50012:50001"
    depends_on:
      - chatServer-dapr
      - database
      - zipkin

  friendServer-dapr:
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "friendServer", "-app-port", "80",
                "-components-path", "/components",
                "-config", "/components/config.yaml",
                "-placement-host-address", "dapr-placement:50006"  ]
    depends_on:
      - friendServer
    network_mode: "service:friendServer"
    volumes:
      - "./Dapr/components/:/components"
  
  guildServer:
    image: ${DOCKER_REGISTRY-}openmu-guilds
    build:
      context: .
      dockerfile: Dapr/GuildServer.Host/Dockerfile
    environment:
      DB_HOST: database
    ports:
      - "50013:50001"
    depends_on:
      - database
      - zipkin

  guildServer-dapr:
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "guildServer", "-app-port", "80",
                "-components-path", "/components",
                "-config", "/components/config.yaml",
                "-placement-host-address", "dapr-placement:50006"  ]
    depends_on:
      - guildServer
    network_mode: "service:guildServer"
    volumes:
      - "./Dapr/components/:/components"

  chatServer:
    image: ${DOCKER_REGISTRY-}openmu-chat
    build:
      context: .
      dockerfile: Dapr/ChatServer.Host/Dockerfile
    environment:
      DB_HOST: database
      APPID: chatServer
    ports:
      - "55980:55980"
      - "50014:50001"
    depends_on:
      - database
      - zipkin

  chatServer-dapr:
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "chatServer", "-app-port", "80",
                "-components-path", "/components",
                "-config", "/components/config.yaml",
                "-placement-host-address", "dapr-placement:50006"  ]
    depends_on:
      - chatServer
    network_mode: "service:chatServer"
    volumes:
      - "./Dapr/components/:/components"
  
  setup:
    image: ${DOCKER_REGISTRY-}openmu-setup
    build:
      context: .
      dockerfile: Setup/MUnique.OpenMU.Setup/Dockerfile
    ports:
      - "80"
    environment:
      ASPNETCORE_URLS: http://+:80
      DB_HOST: database
    depends_on:
      - zipkin
      - database

  setup-dapr:
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "setup", "-app-port", "80",
            "-components-path", "/components",
            "-config", "/components/config.yaml",
            "-placement-host-address", "dapr-placement:50006"  ]
    depends_on:
      - setup
    network_mode: "service:setup"

  adminPanel:
    image: ${DOCKER_REGISTRY-}openmu-admin
    build:
      context: .
      dockerfile: Dapr/AdminPanel.Host/Dockerfile
    depends_on:
      - database
    ports:
      - "80"
    environment:
      ASPNETCORE_URLS: http://+:80
      DB_HOST: database
      PATH_BASE: /admin/

  adminPanel-dapr:
    image: "daprio/daprd:latest"
    command: [ "./daprd", "-app-id", "adminPanel", "-app-port", "80",
                "-components-path", "/components",
                "-config", "/components/config.yaml",
                "-placement-host-address", "dapr-placement:50006"  ]

    depends_on:
      - adminPanel
    network_mode: "service:adminPanel"
    volumes:
      - "./Dapr/components/:/components"
